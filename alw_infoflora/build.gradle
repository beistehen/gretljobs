import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import java.nio.file.Files
import de.undercouch.gradle.tasks.download.Download
import groovy.json.JsonSlurper



apply plugin: "de.undercouch.download"
apply plugin: 'ch.so.agi.gretl'


defaultTasks 'csvimport'

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, 'unzip_data')
def pathToDataZip = Paths.get(pathToTempFolder, 'neophyten.gz')
def csvFilePath = Paths.get(pathToUnzipFolder.toString(), 'data', 'data.csv')

ext.filepath = 'irgendeinpath'
ext.filename = 'irgendeinname'

task download_json(type: Download){
    description = "Download Json with filename"
    doLast {
        def inputFile = new File(pathToTempFolder + "/filenames.json")
        def json = new JsonSlurper().parseText(inputFile.text)
        project.filename = json.data.file_name[0]
        project.filepath = json.data.folder_name[0]
        println "Filename = " + filename
    }
    src 'https://obs.infoflora.ch/rest/v4/docs.json?projects=83505'
    username 'lorenz.eugster@vd.so.ch'
    password 'Ziziphora'
    dest new File(pathToTempFolder, 'filenames.json')
    overwrite true
}

task download_file(dependsOn: download_json){
    description = "Download Zip file"

    def localFileName = 'foo' 
    def localPath = '/bar'
    def url = 'https://obs.infoflora.ch/'

    doFirst {
        localFileName = project.filename
        localPath = project.filepath
        url = 'https://obs.infoflora.ch' + localPath + '/' + localFileName        
    }
    doLast {
        download {
            src url
            dest file(pathToDataZip)
            overwrite true
        }
        println "FileSize = " + file(pathToDataZip).size()
    }
}

task unpackFiles(dependsOn: download_file) {
    doLast{
        file(pathToUnzipFolder.toString()+'/neophyten.csv').withOutputStream { os ->
        os << resources.gzip(pathToDataZip).read()
        }
     }
}

task csvimport(type: CsvImport, dependsOn: unpackFiles){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "alw_infoflora"
    tableName = "neophyten_neophytenstandorte"
    firstLineIsHeader=true
    valueSeparator = ";"
    dataFile = file(pathToUnzipFolder.toString()+'/neophyten_neu.csv')
}

/*

task csvimport(type: CsvImport, dependsOn: unpackFiles){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "test"
    tableName = "newtable"
    firstLineIsHeader=true
    valueSeparator = ";"
    dataFile = file(pathToUnzipFolder.toString()+'/test.csv')
}

task dbImport(type: Ili2pgImport, dependsOn: 'unzipData'){
    description = "Import plz_ortschaften-Data into database"
    doLast {
        println "Data imported into db: " + dbUriSogis
    }
    database = [dbUriSogis, dbUserSogis, dbPwdSogis]
    dbschema = "agi_plz_ortschaften"
    models = "PLZOCH1LV95D"
    disableValidation = false
    dataFile = file(xtfFilePath)
    deleteData = true
    strokeArcs = true
}


task convertData(type: Db2Db, dependsOn: 'dbImport'){
    description = "Convert plz_ortschaften-Data"
    doLast {
        println "plz_ortschaften-Data are converted."
    }
    finalizedBy 'removeFiles'

    sourceDb = [dbUriSogis, dbUserSogis, dbPwdSogis]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('plzortschaften_ortschaft.sql', 'agi_plz_ortschaften_pub.plzortschaften_ortschaft', true),
            new TransferSet('plzortschaften_postleitzahl.sql', 'agi_plz_ortschaften_pub.plzortschaften_postleitzahl', true)
    ];
}


task removeFiles(type: Delete) {
    description = "Remove Files"
    doLast {
        println "Files removed."
    }
    delete file(pathToUnzipFolder), file(pathToDataZip)
}
*/
