import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import java.nio.file.Files
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat
import java.util.Date
import java.util.ArrayList
import java.util.Iterator
import java.util.List


apply plugin: 'ch.so.agi.gretl'


defaultTasks 'clean_geometry'
//defaultTasks 'export_natgef_daten'

//NUR PROVISORISCH! 
def Auftragskennung = 'Himmelried'

def pathToTempFolder = System.getProperty('java.io.tmpdir')

// PROCESSING VORBEREITUNG UND IMPORT 

task prepare_db(type: SqlExecutor) {
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    sqlFiles = ['prepare_db.sql']
}

task make_staging_schema(type: Ili2pgImportSchema, dependsOn: prepare_db){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_AFU_Naturgefahren_Kernmodell_20231016"
    dbschema = "afu_naturgefahren_staging_v1"
    beautifyEnumDispName = true
    strokeArcs = true
    createEnumTabs = true
    createNumChecks = true
    createFk = true
    createFkIdx = true
    createGeomIdx = true
    createMetaInfo = true
    createBasketCol = true
    createUnique = true
    smart2Inheritance = true 
}

task make_naturgefahren_schema(type: Ili2pgImportSchema, dependsOn: make_staging_schema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_AFU_Naturgefahren_20230802"
    dbschema = "afu_naturgefahren_v1"
    beautifyEnumDispName = true
    strokeArcs = true
    createEnumTabs = true
    createNumChecks = true
    createFk = true
    createFkIdx = true
    createGeomIdx = true
    createMetaInfo = true
    createBasketCol = true
    createUnique = true
    smart2Inheritance = true
}

task make_alte_dokumente_schema(type: Ili2pgImportSchema, dependsOn: make_naturgefahren_schema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_AFU_Naturgefahren_alte_Dokumente_20240119"
    dbschema = "afu_naturgefahren_alte_dokumente_v1"
    beautifyEnumDispName = true
    strokeArcs = true
    createEnumTabs = true
    createNumChecks = true
    createMetaInfo = true
    createUnique = true
}

task export_natgef_daten(type: Ili2pgExport, dependsOn: make_alte_dokumente_schema) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = "afu_naturgefahren_v1"
    models = "SO_AFU_Naturgefahren_20230802"
    disableValidation = true
    dataset = Auftragskennung
    dataFile = file(Paths.get(pathToTempFolder, Auftragskennung+".xtf"))
    
}

task validateData(type: IliValidator, dependsOn: export_natgef_daten) {
    dataFiles = file(Paths.get(pathToTempFolder, Auftragskennung+".xtf"))
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

// (ist nur lokal nötig)
task truncateTables(type: SqlExecutor, dependsOn: validateData) {
    description = "Leert die Tabellen"
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    sqlFiles = [
            'truncate_table.sql'
    ]
}

task import_natgef_daten(type: Ili2pgReplace, dependsOn: truncateTables){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    dataFile = file(Paths.get(pathToTempFolder, Auftragskennung+".xtf"))
    dbschema = "afu_naturgefahren_v1"
    dataset = Auftragskennung
}

task createDatasetAndBaskets(type: SqlExecutor, dependsOn: import_natgef_daten) {
    description = "Bacht die Baskets bereit"
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    sqlFiles = ['createbaskets.sql']
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task make_naturgefahren_alt_schema(type: Ili2pgImportSchema, dependsOn: createDatasetAndBaskets){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_AfU_Gefahrenkartierung_20181129"
    dbschema = "afu_gefahrenkartierung"
    createGeomIdx = true
    createFk = true
    createFkIdx = true
    createUnique = true
    createEnumTabs = true
    beautifyEnumDispName = true
    createMetaInfo = true
    createNumChecks = true
    nameByTopic = true
    strokeArcs = true
    createTidCol = true
}

task export_alte_natgef_daten(type: Ili2pgExport, dependsOn: make_naturgefahren_alt_schema) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = "afu_gefahrenkartierung"
    models = "SO_AfU_Gefahrenkartierung_20181129"
    disableValidation = true
    dataFile = file(Paths.get(pathToTempFolder, "natgef_alt.xtf"))
    
}

task import_natgef_alt_daten(type: Ili2pgImport, dependsOn: export_alte_natgef_daten){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    dataFile = file(Paths.get(pathToTempFolder, "natgef_alt.xtf"))
    dbschema = "afu_gefahrenkartierung"
    disableValidation = true
    deleteData = true
}

task make_naturgefahren_beurteilungsgebiet_schema(type: Ili2pgImportSchema, dependsOn: import_natgef_alt_daten){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_AFU_Naturgefahren_Beurteilungsgebiet_20231127"
    dbschema = "afu_naturgefahren_beurteilungsgebiet_v1"
    beautifyEnumDispName = true
    strokeArcs = true
    createEnumTabs = true
    createNumChecks = true
    createFk = true
    createFkIdx = true
    createGeomIdx = true
    createMetaInfo = true
    createBasketCol = true
    createUnique = true
    smart2Inheritance = true
}

task export_beurteilungsgebiet(type: Ili2pgExport, dependsOn: make_naturgefahren_beurteilungsgebiet_schema) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = "afu_naturgefahren_beurteilungsgebiet_v1"
    models = "SO_AFU_Naturgefahren_Beurteilungsgebiet_20231127"
    disableValidation = true
    dataFile = file(Paths.get(pathToTempFolder, "natgef_beurteilungsgebiet.xtf"))
    
}

task import_beurteilungsgebiet(type: Ili2pgImport, dependsOn: export_beurteilungsgebiet){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    dataFile = file(Paths.get(pathToTempFolder, "natgef_beurteilungsgebiet.xtf"))
    dbschema = "afu_naturgefahren_beurteilungsgebiet_v1"
    disableValidation = true
    deleteData = true
}

task make_hoheitsgrenzen_schema(type: Ili2pgImportSchema, dependsOn: import_beurteilungsgebiet){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_Hoheitsgrenzen_Publikation_20170626"
    dbschema = "agi_hoheitsgrenzen_pub"
    beautifyEnumDispName = true
    nameByTopic = true
    strokeArcs = true
    createEnumTabs = true
    createNumChecks = true
    createFk = true
    createFkIdx = true
    createGeomIdx = true
    createMetaInfo = true
    createBasketCol = true
    createUnique = true
    smart2Inheritance = true
    
}

task export_hoheitsgrenzen(type: Ili2pgExport, dependsOn: make_hoheitsgrenzen_schema) {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = "agi_hoheitsgrenzen_pub"
    models = "SO_Hoheitsgrenzen_Publikation_20170626"
    disableValidation = true
    dataFile = file(Paths.get(pathToTempFolder, "hoheitsgrenzen.xtf"))
    
}

task import_hoheitsgrenzen(type: Ili2pgImport, dependsOn: export_hoheitsgrenzen){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    dataFile = file(Paths.get(pathToTempFolder, "hoheitsgrenzen.xtf"))
    dbschema = "agi_hoheitsgrenzen_pub"
    disableValidation = true
    deleteData = true
}

// SYNOPTISCHE INTENSITÄT

task synoptische_intensitaet(type: Db2Db, dependsOn: import_hoheitsgrenzen) {
    description = "Berechnugn der synoptischen Intensität mit den neuen Daten"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('synoptische_intensitaet.sql','afu_naturgefahren_staging_v1.synoptische_intensitaet', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task synoptische_intensitaet_altdaten_copy(type: Db2Db, dependsOn: synoptische_intensitaet) {
    description = "Kopieren der alten Daten der synoptischen Intensität"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('synoptische_intensitaet_altdaten_copy.sql','afu_naturgefahren_staging_v1.synoptische_intensitaet', false)
    ];
}

// GEFAHRENGEBIET TEILPROZESSE 

task gefahrengebiet_teilprozess_absenkung_einsturz(type: Db2Db, dependsOn: synoptische_intensitaet_altdaten_copy) {
    description = "Berechnugn der Gefahrengebiete des Teilprozesses Absenkung und Einsturz"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_absenkung_einsturz.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_absenkung_einsturz', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

// Soll nicht mehr kopiert werden!
//task gefahrengebiet_teilprozess_absenkung_einsturz_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_absenkung_einsturz) {
//    description = "Kopieren der alten Daten der Gefahrengebiete des Teilprozesses Absenkung und Einsturz"
//    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
//    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
//    transferSets = [
//            new TransferSet('gefahrengebiet_teilprozess_absenkung_einsturz_altdaten_copy.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_absenkung_einsturz', false)
//    ];
//}


task gefahrengebiet_teilprozess_spontane_rutschung_hangmure(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_absenkung_einsturz) {
    description = "Berechnugn der Gefahrengebiete des Teilprozesses spontane Rutschungen und Hangmure"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_spontane_rutschung_hangmure.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_spontane_rutschung_hangmure', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task gefahrengebiet_teilprozess_spontane_rutschung_hangmure_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_spontane_rutschung_hangmure) {
    description = "Kopieren der alten Daten der Gefahrengebiete des Teilprozesses spontane Rutschungen und Hangmure"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_spontane_rutschung_hangmure_altdaten_copy.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_spontane_rutschung_hangmure', false)
    ];
}

task gefahrengebiet_teilprozess_murgang(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_spontane_rutschung_hangmure_altdaten_copy) {
    description = "Berechnugn der Gefahrengebiete des Teilprozesses Murgang"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_murgang.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_murgang', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task gefahrengebiet_teilprozess_murgang_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_murgang) {
    description = "Kopieren der alten Daten der Gefahrengebiete des Teilprozesses Murgang"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_murgang_altdaten_copy.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_murgang', false)
    ];
}

task gefahrengebiet_teilprozess_permanente_rutschung(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_murgang_altdaten_copy) {
    description = "Berechnugn der Gefahrengebiete des Teilprozesses permanente Rutschung"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_permanente_rutschung.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_permanente_rutschung', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task gefahrengebiet_teilprozess_permanente_rutschung_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_permanente_rutschung) {
    description = "Kopieren der alten Daten der Gefahrengebiete des Teilprozesses permanente Rutschung"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_permanente_rutschung_altdaten_copy.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_permanente_rutschung', false)
    ];
}

task gefahrengebiet_teilprozess_stein_block_fels_bergsturz(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_permanente_rutschung_altdaten_copy) {
    description = "Berechnugn der Gefahrengebiete des Teilprozesses Stein-/Blockschlag, Fels-/Bergsturz"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_stein_block_fels_bergsturz.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_stein_block_fels_bergsturz', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task gefahrengebiet_teilprozess_stein_block_fels_bergsturz_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_stein_block_fels_bergsturz) {
    description = "Kopieren der alten Daten der Gefahrengebiete des Teilprozesses Stein-/Blockschlag, Fels-/Bergsturz"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_stein_block_fels_bergsturz_altdaten_copy.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_stein_block_fels_bergsturz', false)
    ];
}

task gefahrengebiet_teilprozess_ueberflutung(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_stein_block_fels_bergsturz_altdaten_copy) {
    description = "Berechnugn der Gefahrengebiete des Teilprozesses Überflutung"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_ueberflutung.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_ueberflutung', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task gefahrengebiet_teilprozess_ueberflutung_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_ueberflutung) {
    description = "Kopieren der alten Daten der Gefahrengebiete des Teilprozesses Überflutung"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_teilprozess_ueberflutung_altdaten_copy.sql','afu_naturgefahren_staging_v1.gefahrengebiet_teilprozess_ueberflutung', false)
    ];
}

//HAUPTPROZESSE

task gefahrengebiet_hauptprozess_wasser(type: Db2Db, dependsOn: gefahrengebiet_teilprozess_ueberflutung_altdaten_copy) {
    description = "Berechnugn der Gefahrengebiete des Hauptprozess Wasser"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_hauptprozess_wasser.sql','afu_naturgefahren_staging_v1.gefahrengebiet_hauptprozess_wasser', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task gefahrengebiet_hauptprozess_wasser_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_hauptprozess_wasser) {
    description = "Kopieren der alten Daten der Gefahrengebiete des Hauptprozesses Wasser"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_hauptprozess_wasser_altdaten_copy.sql','afu_naturgefahren_staging_v1.gefahrengebiet_hauptprozess_wasser', false)
    ];
}

task gefahrengebiet_hauptprozess_rutschung(type: Db2Db, dependsOn: gefahrengebiet_hauptprozess_wasser_altdaten_copy) {
    description = "Berechnugn der Gefahrengebiete des Hauptprozess Rutschung"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_hauptprozess_rutschung.sql','afu_naturgefahren_staging_v1.gefahrengebiet_hauptprozess_rutschung', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}


task gefahrengebiet_hauptprozess_rutschung_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_hauptprozess_rutschung) {
    description = "Kopieren der alten Daten der Gefahrengebiete des Hauptprozesses Rutschung"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_hauptprozess_rutschung_altdaten_copy.sql','afu_naturgefahren_staging_v1.gefahrengebiet_hauptprozess_rutschung', false)
    ];
}

task gefahrengebiet_hauptprozess_sturz(type: Db2Db, dependsOn: gefahrengebiet_hauptprozess_rutschung_altdaten_copy) {
    description = "Berechnugn der Gefahrengebiete des Hauptprozess Sturz"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_hauptprozess_sturz.sql','afu_naturgefahren_staging_v1.gefahrengebiet_hauptprozess_sturz', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task gefahrengebiet_hauptprozess_sturz_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_hauptprozess_sturz) {
    description = "Kopieren der alten Daten der Gefahrengebiete des Hauptprozesses Sturz"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_hauptprozess_sturz_altdaten_copy.sql','afu_naturgefahren_staging_v1.gefahrengebiet_hauptprozess_sturz', false)
    ];
}

// HAUPTPROZESSE SYNOPTISCH

task gefahrengebiet_hauptprozesse_synoptisch(type: Db2Db, dependsOn: gefahrengebiet_hauptprozess_sturz_altdaten_copy) {
    description = "Berechnugn der synoptischen Hauptprozess - Gefahrengebiete"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_hauptprozesse_synoptisch.sql','afu_naturgefahren_staging_v1.synoptisches_gefahrengebiet', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task gefahrengebiet_hauptprozesse_synoptisch_altdaten_copy(type: Db2Db, dependsOn: gefahrengebiet_hauptprozesse_synoptisch) {
    description = "Kopieren der alten Daten der synoptischen Gefahrengebiete der Hauptprozesse"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gefahrengebiet_hauptprozesse_synoptisch_altdaten_copy.sql','afu_naturgefahren_staging_v1.synoptisches_gefahrengebiet', false)
    ];
}

// FLIESSRICHTUNG

task fliessrichtung(type: Db2Db, dependsOn: gefahrengebiet_hauptprozesse_synoptisch_altdaten_copy) {
    description = "Kopieren der Fliessrichtungen"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('fliessrichtung.sql','afu_naturgefahren_staging_v1.fliessrichtung', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task fliessrichtung_altdaten_copy(type: Db2Db, dependsOn: fliessrichtung) {
    description = "Kopieren der alten Daten der fliessrichtung"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('fliessrichtung_altdaten_copy.sql','afu_naturgefahren_staging_v1.fliessrichtung', false)
    ];
}

// FLIESSTIEFEN

task fliesstiefen(type: Db2Db, dependsOn: fliessrichtung_altdaten_copy) {
    description = "Kopieren der Fliesstiefen"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('fliesstiefen.sql','afu_naturgefahren_staging_v1.fliesstiefen', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task fliesstiefen_altdaten_copy(type: Db2Db, dependsOn: fliesstiefen) {
    description = "Kopieren der alten Daten der fliesstiefen"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('fliesstiefen_altdaten_copy.sql','afu_naturgefahren_staging_v1.fliesstiefen', false)
    ];
}

// UFEREROSION

task ufererosion(type: Db2Db, dependsOn: fliesstiefen_altdaten_copy) {
    description = "Kopieren der Ufererosion"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('ufererosion.sql','afu_naturgefahren_staging_v1.ufererosion', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task ufererosion_altdaten_copy(type: Db2Db, dependsOn: ufererosion) {
    description = "Kopieren der alten Daten der Ufererosion"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('ufererosion_altdaten_copy.sql','afu_naturgefahren_staging_v1.ufererosion', false)
    ];
}

// ERHEBUNGSGEBIET 

task erhebungsgebiet(type: Db2Db, dependsOn: ufererosion_altdaten_copy) {
    description = "Kopieren der Erhebungsgebiete"
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('erhebungsgebiet.sql','afu_naturgefahren_staging_v1.erhebungsgebiet', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

// Dokumente pro Gemeinden 

task copy_alte_dokumente(type: Db2Db, dependsOn: erhebungsgebiet) {
    description = "Kopiert die alten Dokumente von der Pub-DB in die Edit-DB"
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('alte_dokumente_copy.sql','afu_naturgefahren_alte_dokumente_v1.alte_dokumente', true)
    ];
}

task dokumente_pro_gemeinde(type: Db2Db, dependsOn: copy_alte_dokumente) {
    description = "Teilt jedes Dokument einer Gemeinde mit entsprechendem Gemeindepolygon zu."
    sourceDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('dokumente_pro_gemeinde.sql','afu_naturgefahren_staging_v1.dokumente_pro_gemeinde', true)
    ];
    sqlParameters = [kennung: "'"+Auftragskennung+"'"]
}

task clean_geometry(type: SqlExecutor, dependsOn: dokumente_pro_gemeinde) {
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    sqlFiles = ['geometrie_bereinigung.sql']
}
