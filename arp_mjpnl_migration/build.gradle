description = """\n
Migration der MJPNL-Daten von der alten SOGIS-DB in das neue Applikationsschema arp_mjpnl_v1 (EDIT-DB)

Fragen an: Andreas Neumann (AGI) und Odile Bruggisser (ARP)
"""

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'clean_mjpnl_after_import'

def DB_Schema_MJPNL = "arp_mjpnl_v1"

task "clean_mjpnl_before_import"(type: SqlExecutor) {
    description = "MJPNL Daten in der richtigen Reihenfolge (dependencies) löschen vor dem Neuimport"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['delete_mjpnl_before_import.sql','mjpnl_dummy_entries.sql']
}

task "transfer_mjpnl"(type: Db2Db,dependsOn: "clean_mjpnl_before_import"){
    description = "Migration MJPNL-Daten aus alter 'sogis' PostgreSQL-Datenbank"
    sourceDb = ['jdbc:postgresql://geodb.verw.rootso.org/sogis', dbUserSogis, dbPwdSogis]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    transferSets = [
            new TransferSet('mjpnl_vereinbarung.sql', 'arp_mjpnl_v1.mjpnl_vereinbarung', false),
            new TransferSet('mjpnl_leistung.sql', 'arp_mjpnl_v1.mjpnl_abrechnung_per_leistung', false)
    ];
}

task "postprocessing_fill_t_basket"(type: SqlExecutor,dependsOn: "transfer_mjpnl") {
    description = "Füge den migrierten Daten korrekte Baskets zu"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_fill_t_basket.sql']
}

task "postprocessing_remove_duplicate_coords"(type: SqlExecutor,dependsOn: "postprocessing_fill_t_basket") {
    description = "Doppelte Koordinaten in Vereinbarungs-Geometrien entfernen"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_remove_duplicate_coords.sql']
}

task "postprocessing_soeg_uzl"(type: SqlExecutor,dependsOn: "postprocessing_remove_duplicate_coords") {
    description = "Check ob Vereinbarungsfläche in Sömmerungsgebiet liegt. Korrekte UZL Subregion zuweisen."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_vereinbarung_soemmerungsgebiet.sql','mjpnl_postprocessing_vereinbarung_uzl-region.sql']
}

task "postprocessing_vereinbarungsnummern"(type: SqlExecutor,dependsOn: "postprocessing_soeg_uzl") {
    description = "Neue Vereinbarungsnummern erstellen."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_vereinbarungsnummern.sql']
}

task "postprocessing_flurnamen_liegenschaften"(type: SqlExecutor,dependsOn: "postprocessing_vereinbarungsnummern") {
    description = "Spatial Joins zu Gemeinden (Name und BFS-Nr) und Flurnamen herstellen."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_vereinbarungen_gemeinden_zuweisen.sql','mjpnl_postprocessing_vereinbarungen_flurnamen_zuweisen.sql','mjpnl_postprocessing_vereinbarungen_liegenschaften_zuweisen.sql']
}

task "postprocessing_gelan_bewirtschaftungseinheiten"(type: SqlExecutor,dependsOn: "postprocessing_flurnamen_liegenschaften") {
    description = "Spatial join von Vereinbarung zu GELAN Bewirtschaftungseinheit herstellen."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_vereinbarungen_gelan_bewirtschaftungseinheiten.sql']
}

task "postprocessing_gelan_bewirtschafter"(type: SqlExecutor,dependsOn: "postprocessing_gelan_bewirtschaftungseinheiten") {
    description = "GELAN Bewirtschafter zuweisen."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_vereinbarungen_gelan_bewirtschafter.sql']
}

task "postprocessing_gelan_kulturflaechen"(type: SqlExecutor,dependsOn: "postprocessing_gelan_bewirtschafter") {
    description = "Spatial join von Vereinbarung zu GELAN Kulturflaechen herstellen.."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_vereinbarungen_gelan_kulturflaechen.sql']
}

task "postprocessing_beurteilungen_erstellen"(type: SqlExecutor,dependsOn: "postprocessing_gelan_kulturflaechen") {
    description = "Beurteilungen erstellen."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_beurteilungen_wiese.sql','mjpnl_postprocessing_beurteilungen_hecke.sql','mjpnl_postprocessing_beurteilungen_hostet.sql','mjpnl_postprocessing_beurteilungen_obl.sql','mjpnl_postprocessing_beurteilungen_weide_ln.sql','mjpnl_postprocessing_beurteilungen_weide_soeg.sql']
}

task "postprocessing_abrechnung_leistungen"(type: SqlExecutor,dependsOn: "postprocessing_beurteilungen_erstellen") {
    description = "Foreign keys zwischen Leistungen und Vereinbarungen wiederherstellen. Zusammengefasste Abrechnungen erstellen."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_postprocessing_leistungen_fkey_vereinbarungen.sql','mjpnl_postprocessing_abrechnung_per_vereinbarung.sql','mjpnl_postprocessing_abrechnung_per_bewirtschafter.sql']
}

task "clean_mjpnl_after_import"(type: SqlExecutor,dependsOn: "postprocessing_abrechnung_leistungen"){
    description = "Dummy Daten löschen"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_MJPNL:DB_Schema_MJPNL]
    sqlFiles = ['mjpnl_remove_dummy_entries.sql']
}
