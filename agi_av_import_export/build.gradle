buildscript {
	repositories {
        mavenLocal()
		maven { url "http://jars.interlis.ch" }
		maven { url "http://jars.umleditor.org" }
		maven { url "https://repo.osgeo.org/repository/release/" }
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://dl.bintray.com/sogis/iox-wkf" } // temporary
		mavenCentral()
	}
	dependencies {
		//classpath group: 'ch.so.agi', name: 'gretl',  version: '2.1.59'
		classpath group: 'ch.so.agi', name: 'gretl',  version: '2.1.9999'
	}
}

import java.text.SimpleDateFormat
import java.nio.file.Paths
import java.nio.file.Files
import java.io.File
import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*
import ch.so.agi.gretl.util.TaskUtil
import org.apache.commons.net.ftp.*


apply plugin: 'ch.so.agi.gretl'

//defaultTasks 'uploadFilesToS3'

def pathToTempFolder = Files.createTempDirectory("agiavimport-").toFile().getAbsolutePath()
def pathToUnzipFolder = Paths.get(pathToTempFolder, 'unzip_data')
pathToUnzipFolder = "/var/folders/1y/52jlt1cd1l557f_hgd9xxgm00000gn/T/agiavimport-9037765408044600052/unzip_data"
def pathToFederalFolder = Paths.get(pathToTempFolder, 'ch')
def pathToGeobauFolder = Paths.get(pathToTempFolder, 'geobau')
//def pathToUnzipFolder = Files.createTempDirectory("agiavimport-unzip_data-").toFile().getAbsolutePath()

/*
def s3Bucket = "ch.so.afu.grundwasserbewirtschaftung"
if (gretlEnvironment == "test") {
    s3Bucket += "-test"
} else if (gretlEnvironment == "integration") {
    s3Bucket += "-int"
} else if (gretlEnvironment == "production") {
    // do nothing
} else {
    s3Bucket += "-test"
}
*/

task downloadFiles(type: FtpDownload ){ 
    server = ftpServerInfogrips
    user = ftpUserInfogrips
    password = ftpPwdInfogrips
    systemType = "WINDOWS"
    fileType = "BINARY"
    //localDir = System.getProperty("java.io.tmpdir") + "/gretl-share/" 
    //remoteDir = "/DM01AVSO24LV95/ITF/" 
    localDir = pathToTempFolder
    remoteDir = "\\dm01avso24lv95\\itf" 
    remoteFile = "*.zip" 

    doLast {
        println "Files downloaded: " + pathToTempFolder
    }       
} 

task unzipData(dependsOn: 'downloadFiles') {
    doLast {
        fileTree(pathToTempFolder).files.each { 
            String fileName = it
            copy {
                from zipTree(fileName)
                into file(pathToUnzipFolder)

                include "**/*.itf"
                include "**/*.ITF"

                rename { String jt ->
                    return jt.toLowerCase()
                }
            }
        }
        println "File unzipped to directory: " + pathToUnzipFolder
    }
}

task createFederalFiles(type: Av2ch) {
    inputFile = fileTree(pathToUnzipFolder) { include '*.itf' }
    outputDirectory = file(pathToFederalFolder)
    zip = true

    doLast {
        println "Federal files created: " + pathToFederalFolder
    }
}

// TODO: Upload federal files

task createDxfGeobauFiles(type: Av2geobau, dependsOn: 'createFederalFiles') {
    itfFiles = fileTree(pathToFederalFolder) { include "*.itf" }
    dxfDirectory = file(pathToGeobauFolder)
    zip = true

    doLast {
        println "Geobau files created: " + pathToGeobauFolder
    }
}

// TODO: Upload geobau files

//task importData(type: Ili2pgReplace, dependsOn: 'unzipData') {
task importData(type: Ili2pgReplace) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = 'DM01AVSO24LV95'
    dbschema = 'agi_dm01avso24'
    dataFile = fileTree(pathToUnzipFolder) { include '*.itf' }
    dataset = fileTree(pathToUnzipFolder) { include '*.itf' }
    //dataset = fileTree(pathToUnzipFolder).matching { include "*.itf" }
    //dataset = ["240100","240200"]
    //dataFile = "/var/folders/5r/cn9700vd4s719l1555_2zcs80000gn/T/agiavimport-3802844963390050294/unzip_data/240100.ITF"
    //dataset = "240100"

    disableValidation = true

    doLast {
        println "Data imported into db: " + dbUriEdit
    }
}
