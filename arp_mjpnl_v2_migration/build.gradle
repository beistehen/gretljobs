description = """\n
Migration der MJPNL-Daten von arp_mjpnl_v1 auf arp_mjpnl_v2 anhand XSL Tranformation.

Fragen an: Odile Bruggisser (ARP)
"""

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*
import java.nio.file.Paths

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'importDataToV2'

def dB_Schema_MJPNL_v1 = "arp_mjpnl_v1"
def dB_Schema_MJPNL_v2 = "arp_mjpnl_v2"

def mjpnlDataFile = file('mjpnldata.xtf')
def trafoFile = file('mjpnltrafo.xslt')
def trafoFileContent = """<xsl:stylesheet
        xmlns="http://www.interlis.ch/INTERLIS2.3"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:ili="http://www.interlis.ch/INTERLIS2.3"
        exclude-result-prefixes="ili"
        version="1.0">

    <!-- generic template for all nodes -->
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>

    <!-- base model needs to be renamed -->
    <xsl:template match="ili:MODEL">
        <xsl:choose>
            <xsl:when test="@NAME='SO_ARP_MJPNL_20201026'">
                <MODEL NAME="SO_ARP_MJPNL_20240606" VERSION="2024-06-06" URI="{@URI}"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:copy-of select="."/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- elements need to be renamed -->
    <xsl:template match="*[starts-with(local-name(), 'SO_ARP_MJPNL_20201026')]">
        <xsl:element name="SO_ARP_MJPNL_20240606{substring-after(local-name(), 'SO_ARP_MJPNL_20201026')}">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>

    <!-- BID values need to be changed -->   
    <xsl:template match="ili:DATASECTION/*/@BID">
        <xsl:attribute name="BID">
            <xsl:value-of select="concat('SO_ARP_MJPNL_20240606', substring-after(., 'SO_ARP_MJPNL_20201026'))"/>            
        </xsl:attribute>
    </xsl:template>
</xsl:stylesheet>
"""

task copyUploadedFile(type: Copy) {
    from "upload/"
    into "upload/"
    rename("uploadFile", "mjpnltrafo.xslt")
    trafoFile = file('mjpnltrafo.xslt')
}

task writeTrafoFile (dependsOn: copyUploadedFile) {
    trafoFile.write(trafoFileContent,'utf-8') 
}

task exportDataFromV1(type: Ili2pgExport, dependsOn: writeTrafoFile) {
    description = "Exportiert die MJPNL Daten aus v1"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = dB_Schema_MJPNL_v1
    disableValidation = true
    dataFile = mjpnlDataFile
    models = "SO_ARP_MJPNL_20201026"
}

task transformTheData(type: XslTransformer, dependsOn: exportDataFromV1) {
    description = "Transformiert die MJPNL Daten von v1 in v2 Format"
    xslFile = trafoFile
    xmlFile = mjpnlDataFile
    outDirectory = file(".")
}

task importDataToV2(type: Ili2pgReplace, dependsOn: transformTheData) {
    description = 'Importiert die MJPNL Daten in v2'
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = dB_Schema_MJPNL_v2
    disableValidation = true
    topics = 'SO_ARP_MJPNL_20240606.MJPNL'
    dataset = 'MJPNL'
    dataFile = mjpnlDataFile
    models = "SO_ARP_MJPNL_20240606"
}