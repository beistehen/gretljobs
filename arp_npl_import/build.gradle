description = """\n
Importiert Nutzungsplanungs-INTERLIS-Daten in die Datenbank
und baut diese in das Publikationsmodell um.

Momentan wird noch nicht parametrisiert (also pro Gemeinde)
umgebaut, sondern immer der gesamte Datensatz als Quelle
verwendet. Der parametrisierte Umbau kann erst erfolgen,
wenn die benötigten GRETL-Steps dies unterstützen.

Die Performance des Umbau-Schrittes dürfte bei erst wenig
vorhandenen Gemeinden in der Quell-Datenbank nicht
problematisch sein.

gradle -I init.gradle checkXtfName -Pxtf=path/to/XXXX_fubar.xtf
"""

apply plugin: 'ch.so.agi.gretl'

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

defaultTasks 'replaceDataset'

ext {
    setNonExistingPropertyToUndefinedValue('xtf')
}

task checkXtfName() {
    description = "Prüft, ob die ersten vier Buchstaben im XTF-Filenamen einer Nummer entsprechen, die im BfS-Range des Kt. SO liegt."    
    doFirst {
        def bfsRange = 2401..2622
        def bfsNr = file(xtf).getName().take(4) as int
        assert true == bfsRange.contains(bfsNr)
    }
}

task validateDataset(type: IliValidator, dependsOn: 'checkXtfName') {
    description = "Validiert einen Datensatz (=XTF)."    
    dataFiles = [xtf]
}

task replaceDataset (type: Ili2pgReplace, dependsOn: 'validateDataset') {
    description = "Ersetzt einen Datensatz (=XTF) in der Erfassungsdatenbank."
    database = [dbUriSogis, dbUserSogis, dbPwdSogis]
    dbschema = "arp_npl"
    models = "SO_Nutzungsplanung_20171118"
    disableValidation = true
    dataset = file(xtf).getName().take(4)
    dataFile = xtf
}

// Datenumbau aus technischen Gründen ausgelagert in eigenen GRETL-Job (arp_npl_pub)
/*
task transformArpNpl(type: Db2Db, dependsOn: 'replaceDataset') {
    description = "Datenumbau in das Publikationsmodell."
    sourceDb = [dbUriSogis, dbUserSogis, dbPwdSogis]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet("transform_arp_npl_pub_nutzungsplanung_grundnutzung_json_dokumente.sql", 'arp_npl_pub.nutzungsplanung_grundnutzung', true),
            new TransferSet("transform_arp_npl_pub_nutzungsplanung_ueberlagernd_flaeche_json_dokumente.sql", 'arp_npl_pub.nutzungsplanung_ueberlagernd_flaeche', true),
            new TransferSet("transform_arp_npl_pub_nutzungsplanung_ueberlagernd_linie_json_dokumente.sql", 'arp_npl_pub.nutzungsplanung_ueberlagernd_linie', true),
            new TransferSet("transform_arp_npl_pub_nutzungsplanung_ueberlagernd_punkt_json_dokumente.sql", 'arp_npl_pub.nutzungsplanung_ueberlagernd_punkt', true),
            new TransferSet("transform_arp_npl_pub_nutzungsplanung_beschriftung.sql", 'arp_npl_pub.nutzungsplanung_nutzungsplanung_beschriftung', true),
            new TransferSet("transform_arp_npl_pub_erschliessung_flaechenobjekt_json_dokumente.sql", 'arp_npl_pub.nutzungsplanung_erschliessung_flaechenobjekt', true),
            new TransferSet("transform_arp_npl_pub_erschliessung_linienobjekt_json_dokumente.sql", 'arp_npl_pub.nutzungsplanung_erschliessung_linienobjekt', true),
            new TransferSet("transform_arp_npl_pub_erschliessung_punktobjekt_json_dokumente.sql", 'arp_npl_pub.nutzungsplanung_erschliessung_punktobjekt', true),
            new TransferSet("transform_arp_npl_pub_erschliessung_beschriftung.sql", 'arp_npl_pub.nutzungsplanung_erschliessung_beschriftung', true),
            new TransferSet("transform_arp_npl_pub_vs_perimeter_verfahrensstand.sql", 'arp_npl_pub.nutzungsplanung_vs_perimeter_verfahrensstand', true),
            new TransferSet("transform_arp_npl_pub_vs_perimeter_beschriftung.sql", 'arp_npl_pub.nutzungsplanung_vs_perimeter_beschriftung', true),
            new TransferSet("transform_arp_npl_pub_transfermetadaten.sql", 'arp_npl_pub.nutzungsplanung_transfermetadaten', true)
    ]
}
*/

def setNonExistingPropertyToUndefinedValue(propertyName) {
    setNonExistingPropertyToDefaultValue(propertyName, 'UNDEFINED')
}

def setNonExistingPropertyToDefaultValue(propertyName, defaultValue) {
    if (!project.hasProperty(propertyName)) {
        ext[propertyName] = defaultValue
    }
}