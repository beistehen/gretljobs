import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'transfer_onlinerisk'

def DB_Schema_QRcat = "afu_qrcat_v1"
def DB_Schema_QRcat_Staging = "afu_qrcat_staging_v1"

task transfer_qrcat_to_staging(type: Db2Db,dependsOn: "xxx"){
    description = "Zuerst werden die scharfen QRcat Daten im staging-Schema parkiert"
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat]
    transferSets = [
            new TransferSet('qrcat_szenario_art.sql', DB_Schema_QRcat_Staging + '.qrcat_szenario_art', false),
            new TransferSet('qrcat_letalitaetsradius_art.sql', DB_Schema_QRcat_Staging + '.qrcat_letalitaetsradius_art', false),
            new TransferSet('qrcat_bevoelkerung_typ.sql', DB_Schema_QRcat_Staging + '.qrcat_bevoelkerung_typ', false),
            new TransferSet('qrcat_wk_grundhaeufigkeit_art.sql', DB_Schema_QRcat_Staging + '.qrcat_wk_grundhaeufigkeit_art', false),
            new TransferSet('qrcat_toxreferenzszenario_typstoff.sql', DB_Schema_QRcat_Staging + '.qrcat_toxreferenzszenario_typstoff', false),
            new TransferSet('qrcat_toxreferenzszenario.sql', DB_Schema_QRcat_Staging + '.qrcat_toxreferenzszenario', false),
            new TransferSet('qrcat_detailszenario_grundhaeufigkeit.sql', DB_Schema_QRcat_Staging + '.qrcat_detailszenario_grundhaeufigkeit', false),
            new TransferSet('qrcat_fwert.sql', DB_Schema_QRcat_Staging + '.qrcat_fwert', false),
            new TransferSet('qrcat_szenario.sql', DB_Schema_QRcat_Staging + '.qrcat_szenario', false),
            new TransferSet('qrcat_toxischunguenstigster_sektor.sql', DB_Schema_QRcat_Staging + '.qrcat_toxischunguenstigster_sektor', false),
            new TransferSet('qrcat_letalflaeche.sql', DB_Schema_QRcat_Staging + '.qrcat_letalflaeche', false)
    ];
}

task "clean_onlinerisk_before_import"(type: SqlExecutor) {
    description = "OnlineRisk Daten in der richtigen Reihenfolge (dependencies) löschen vor dem Neuimport"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat]
    sqlFiles = ['delete_online_risk.sql']
}

task transfer_onlinerisk(type: Db2Db,dependsOn: "clean_onlinerisk_before_import"){
    description = "Übertrag benötigte OnlineRisk-Daten aus AIO PostgreSQL-Datenbank"
    sourceDb = [dbUriOnlinerisk, dbUserOnlinerisk, dbPwdOnlinerisk]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    transferSets = [
            new TransferSet('betrieb.sql', 'afu_qrcat_v1.onlinerisk_betrieb', true),
            new TransferSet('untersuchungseinheit.sql', 'afu_qrcat_v1.onlinerisk_untersuchungseinheit', true, (String[])["geometrie:wkt:2056"]),
            new TransferSet('gebaeude.sql', 'afu_qrcat_v1.onlinerisk_gebaeude', true, (String[])["geometrie:wkt:2056"]),
            new TransferSet('bereich.sql', 'afu_qrcat_v1.onlinerisk_bereich', true),
            new TransferSet('stoff.sql', 'afu_qrcat_v1.onlinerisk_stoff', true),
            new TransferSet('stoff_in_bereich.sql', 'afu_qrcat_v1.onlinerisk_stoff_in_bereich', true)
    ];
}
