buildscript {
    repositories {
        maven { url "https://repo.osgeo.org/repository/release/" }
        maven { url "http://jars.interlis.ch" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath 'commons-net:commons-net:3.6'
    }
}

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.util.TaskUtil
import java.nio.file.Paths
import java.nio.file.Files
import java.io.FileOutputStream
import org.apache.commons.net.ftp.*

apply plugin: 'ch.so.agi.gretl'


defaultTasks "transferFledermausPub"

def pathToTempFolder = Files.createTempDirectory("arpfledermaus-").toFile().getAbsolutePath()
def remoteFileName = "export.csv"
def localFileName = "export.csv"

def server = ftpServerFledermaus
def user = ftpUserFledermaus
def password = ftpPwdFledermaus

task downloadData() {
    doLast {
        def ftp = new FTPClient()

        try {
            ftp.connect(server, 21)
            ftp.login(user, password)

            int reply = ftp.getReplyCode();
            if(!FTPReply.isPositiveCompletion(reply)) {
                throw new Exception("FTP server refused connection.")
            }

            String fileName = Paths.get(pathToTempFolder, localFileName).toFile().getAbsoluteFile()
            FileOutputStream fos = new FileOutputStream(fileName)

            boolean response = ftp.retrieveFile(remoteFileName, fos)
            if (response == false) {
                throw new Exception("Could not retrieve file: " + remoteFileName)
            }
            println "File downloaded: " + fileName
        } catch (Exception e) {
            GradleException ge = TaskUtil.toGradleException(e)
            throw ge;
        } finally {
            if(ftp.isConnected()) {
                try {
                    ftp.disconnect()
                } catch(IOException e) {
                    // do nothing
                }
            }
        }
    }
}

task validateCsv(type: CsvValidator, dependsOn: 'downloadData') {
    models = "SO_ARP_Fledermausfundorte_20200728"
    firstLineIsHeader = true
    dataFiles = [pathToTempFolder.toString()+"/export.csv"]
}

task truncateTable(type: SqlExecutor, dependsOn: 'validateCsv') {
    description = "Leert die Tabelle arp_fledermaus.fledermausfundrte_fledermausfundort"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = [
            'truncate_table.sql'
    ]
}

task importCsv(type: CsvImport, dependsOn: 'truncateTable') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "arp_fledermaus"
    tableName = "fledermausfundrte_fledermausfundort"
    firstLineIsHeader = true
    valueSeparator = ","
    encoding = "UTF-8"
    dataFile = file(pathToTempFolder.toString()+"/export.csv")
}

task transferFledermausPub(type: Db2Db, dependsOn: 'importCsv') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('arp_fledermaus_pub.sql', 'arp_fledermaus_pub.fledermausfundrte_fledermausfundort', true)
    ];
}