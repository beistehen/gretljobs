import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

import java.nio.file.Paths

defaultTasks "publishPub"

def tmpDir = buildDir.toString()
def xtfPath = tmpDir + "/data.xtf"


task writeToPub(type: Db2Db){ 
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
        new TransferSet('waldreservate.sql', 'arp_waldreservate_pub_v1.waldreservat', true)
    ];
}

task update_txt_cols(type: SqlExecutor, dependsOn: writeToPub) {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ['update_txt.sql']
}

task exportXtf(type: Ili2pgExport, dependsOn: update_txt_cols){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = "arp_waldreservate_pub_v1"
    disableValidation = false
    dataFile = xtfPath
    models = "SO_ARP_Waldreservate_Publikation_20231201"
}

task validate(type: IliValidator, dependsOn: exportXtf){
    dataFiles = [xtfPath]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

task publishPub(type: Publisher, dependsOn: validate){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dataIdent = "ch.so.arp.waldreservate"
    dbSchema = "arp_waldreservate_pub_v1"
    modelsToPublish = "SO_ARP_Waldreservate_Publikation_20231201"
    userFormats = true
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}