// Datenumbau alle Nutzungsplanungsdaten für Planregister und sendet dieses an Typo3

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.tasks.Curl.MethodType
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Files
import java.nio.file.Paths
import java.io.File

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'uploadPlanregister'

//Für Planregister
def iliModelPlanregister = "SO_Nutzungsplanung_Planregister_Publikation_20221115"
def dbSchemaPlanregister = "arp_nutzungsplanung_planregister_pub_v1"

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def planregisterFileBaseName = "ch.so.arp.planregister"
def planregisterXtfFileName = planregisterFileBaseName+".xml"
def planregisterZipFileName = planregisterFileBaseName+".xml.gz"

task transfer_planregister_alles(type: Db2Db) {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('insert_dataset.sql', 'arp_nutzungsplanung_planregister_pub_v1.t_ili2db_dataset', true),
            new TransferSet('insert_basket.sql', 'arp_nutzungsplanung_planregister_pub_v1.t_ili2db_basket', true),
            new TransferSet('insert_arp_nutzungsplanung_planregister_pub_grundwasserschutz.sql', 'arp_nutzungsplanung_planregister_pub_v1.planregister_dokument', true),
            new TransferSet('insert_arp_nutzungsplanung_planregister_pub_kantonal.sql', 'arp_nutzungsplanung_planregister_pub_v1.planregister_dokument', false),
            new TransferSet('insert_arp_nutzungsplanung_planregister_pub_kommunal.sql', 'arp_nutzungsplanung_planregister_pub_v1.planregister_dokument', false),
            new TransferSet('insert_arp_nutzungsplanung_planregister_pub_naturreservate.sql', 'arp_nutzungsplanung_planregister_pub_v1.planregister_dokument', false),
            new TransferSet('insert_arp_nutzungsplanung_planregister_pub_waldgrenze.sql', 'arp_nutzungsplanung_planregister_pub_v1.planregister_dokument', false)
    ];
}

task deleteData_doppelte_dokumente(type: SqlExecutor, dependsOn:transfer_planregister_alles) {
    description = "Löscht die doppelten Dokumente aus dem Schema arp_nutzungsplanung_planregister_pub" 
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ["delete_arp_nutzungsplanung_planregister_pub_doppelte_dokumente.sql"]
}

task exportPlanregisterPub(type: Ili2pgExport, dependsOn: 'deleteData_doppelte_dokumente') {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    models = iliModelPlanregister
    dbschema = dbSchemaPlanregister
    dataFile = file(Paths.get(pathToTempFolder, planregisterXtfFileName))
    disableValidation = true
    // Kein Dataset, weil alle Daten enthalten sein sollen. 
}

task zipPlanregister(type: Gzip, dependsOn: 'exportPlanregisterPub') {
    dataFile = file(Paths.get(pathToTempFolder, planregisterXtfFileName)) 
    gzipFile = file(Paths.get(pathToTempFolder, planregisterZipFileName)) 
}

task uploadPlanregister(type: Curl, dependsOn: 'zipPlanregister') {
    serverUrl = "https://so.ch/typo3/api/digiplan"
    method = MethodType.POST
    headers = ["Content-Type": "application/xml", "Content-Encoding": "gzip"]
    dataBinary = file(Paths.get(pathToTempFolder, planregisterZipFileName))
    user = digiplanUser
    password = digiplanPwd
    expectedStatusCode = 202
}
